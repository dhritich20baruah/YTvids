import React, { useState } from 'react'
import Axios from 'axios'

//getStaticProps 
export async function getStaticProps() {
    const mongoose = require('mongoose')
    const Notes = require('../../model/Notes')

    //Connect to mongodb
    await mongoose.connect('mongodb://localhost/nextJSCRUD', {
        useNewUrlParser: true,
        useUnifiedTopology: true
    })
    const notes = await Notes.find().sort({ createdAt: 'desc' })
    return {
        props: {
            notes: JSON.parse(JSON.stringify(notes))
        }
        //The notes needs to be converted to a JSON string to be rendered by the browser. We first convert the notes array to a JSON string using JSON.stringify(), and then immediately parsing the string back into a new array using JSON.parse().
    }
    //The data fetched from mongodb is passed as props to the page component. The notes property in the props object contains the data we fetched. This data will be available in the page component as props.notes.
}

const DisplayNotes = ({ notes }) => {
    const [visibility, setVisibility] = useState(false)
    const [title, setTitle] = useState('')
    const [note, setNote] = useState('')
    const [noteId, setNoteId] = useState('')

    // useEffect(() => {
    //     Axios.get(`/api/showTodo`)
    //         .then((res) => setItems(res.data))
    //         .catch((err) => console.log(err))
    // }, [])
    //To display the todo's we could have used useEffect hook just like in react. We could have created an API to send the todo's from the database and used useEffect hook to fetch the APi and display them.But If we use useEffect hook to display the page it will defeat one of the main reasons of using Next i.e. SEO as the HTML is generated by the javascript at the run-time in client side after the request is received. So here we are going to use getStatic props which is a built-in Next.js function that allows us to pre-render our pages at build time at the servers and not in runtime. When we use getStaticProps, Next.js will pre-render the page with the data we fetched and serve the static HTML to the user. This improves the page's performance and SEO.
    // SERVER               CLIENT

    //Delete function
    const deleteNote = (id) => {
        Axios.delete(`/api/deleteNote?id=${id}`).then(() => {
            window.location.reload(false)
        })
    }

    //Edit function
    const editNote = (title, note, noteId) => {
        setVisibility(visibility => !visibility)
        setTitle(title)
        setNote(note)
        setNoteId(noteId)
    }

    const updateNote = async (noteId) => {
        const noteObj = {
            title: title,
            note: note,
        }
        await Axios.put(`/api/updateNote?id=${noteId}`, noteObj).then(() => {
            window.location.reload(false)
        })
    }

    return (
        <>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Note</th>
                        <th scope="col">Options</th>
                    </tr>
                </thead>
                <tbody>
                    {notes.map((element) => {
                        return (
                            <tr key={element._id}>
                                <td>{element.title}</td>
                                <td>{element.note}</td>
                                <td><button className="btn btn-danger" onClick={() => deleteNote(element._id)}>Delete</button>
                                    <button className="btn btn-primary" onClick={(title, note, noteId) => editNote(element.title, element.note, element._id)}>Edit</button>
                                </td>
                            </tr>
                        )
                    })}

                </tbody>
            </table>

            {visibility && <div className='container'>
                <h2>Edit Note</h2>
                <form>
                    <div className="mb-3">
                        <label for="title" className="form-label">Title</label>
                        <input type="text" className="form-control" id="title" aria-describedby="emailHelp" value={title} onChange={(event) => setTitle(event.target.value)} />
                    </div>
                    <div className="mb-3">
                        <label for="note" className="form-label">Note</label>
                        <input type="text" className="form-control" id="note" value={note} onChange={(event) => setNote(event.target.value)} />
                    </div>
                    <button type="submit" className="btn btn-primary" onClick={() => updateNote(noteId)}>Submit</button>
                    <button className="btn btn-danger" onClick={() => setVisibility(visibility !== visibility)}>Cancel</button>
                </form>
            </div>
            }
        </>
    )
}

export default DisplayNotes