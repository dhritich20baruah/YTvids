
6. Add the form to add todo page and make the necessary changes. 
7. import useState hook and create states.  
7.1 Create the mongoose Schema.
    1. We will have to add mongoose.models = {}. If we don't it will throw an error that once model is compiled we won't be able to overwrite it.
    2. The line resets the mongoose.models to an empty object, like this: mongoose.models = {}. This will remove all the models from the mongoose.models object.

We have to create a mongoose schema for the todo model. create a folder that will contain a file called todo.js. 
import the mongoose package as mongoose. Then define a new mongoose schema by the name todoSchema.
It will contain title with type string and todo also with type string. It will also contain the date in which the todo was created.
Now we will export the model.
Nextjs compiles the model only once. So it will save the first todo but when we create another one it will throw an error. Inorder to work around this problem we will have to add the line mongoose.models = {} The line resets the mongoose.models to an empty object.

Lets go to the api folder and create a file called newTodo.js which will be the api endpoint to add new todos. The different files in this folder will be treated as different api endpoints.
importing mongoose and todo model
we will define a async function called handler that will handle the api request. exporting the handler function
first we will check if the req method is post
we will setup a try catch block
in the try block we will Destructure the req.body object sent from the front end and extracting the values of title and note and also creating two new variables of the same name.
then we will use mongoose to connect with mongodb setup in the localhost. the collection name is   nextCRUD. useunifiedtopology and usenewurlparser are MongoDB driver's new connection management engine and its new urlparser respoectively. We should set them both to true.
variable newNote is the new instance of the todo model created using mongoose with values of title and todo.
.save() is a mongoose command that creates a new record in the collection.
console log the newnote. In the catch block console log any error if there is. send res as internal error
finally close the mongoose connection

Then we will go back to index file and use axios to make a post request to the backend. axios. post /api/newtodo which is the name of the file. send the todoobj and then put up a alert todo added. we also need to import axios 

let's try it title 1 todo 1. lets check the console the todo is saved also check the compass OK the create part of the app is working.

go to display todo.js. go to bootstrap website and copy a table paste it in displaytodo.js. make changes.
check the display. add two buttons in the last column. One for delete and another one for edit. I have to make aslight correction since the display todo file is a react component the filename should start with capital letter. Also in the navbar the displaytodo should be capital. To display the todo's we could have used useEffect hook just like in react. We could have created an API to send the todo's from the database and used the useEffect hook to fetch the data from an api endpoint and display them. But If do that it will defeat one of the main reasons of using Next i.e. SEO as the HTML is generated by the javascript at the run-time in client side after the request is received. 

So here we are going to use getStaticprops which is a built-in Next.js function that allows us to pre-render our pages at build time at the servers and not in runtime. It is used to fetch data that is required to render the page and pass it as props to the page component and serve the static HTML to the user. This improves the page's performance and SEO.









8. Create addTodo api and axios post request at the add todo page.
9. Check if the todo is created at compass.
10. Navigate to display todo page.
11. Get the table from bootstap website to display the todos and add delete and edit buttons
12. First show how useEffect would have worked and also create the api for that.
13. Then use getStaticProps and write the function for that and show its advantage.
14. Next make the delete api and import axios to make delete request.
15. For edit operation copy the form from add todo and paste it in the display page.
16. Import useState and create visibility, title, note and NoteID states.
17. Create the function to display the form and populate it with the data.
18. Then create the function to update todo by coping the function to add todo.
19. Make the update function asynchronous and call window.reload.
20. Create the api to handle to put request.